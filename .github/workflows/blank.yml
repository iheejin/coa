face [] faces = new face[15];

void setup(){
  size(1000, 1000);
  frameRate(60);  
  for(int i = 0; i < 15; i++){
    float x = random(width);  float y = random(height);
    float vx = random(1, 5);  float vy = random(1, 5);
    float d = random(20, 50);
    faces[i] = new face(x, vx, y, vy, d);
  }
}

void draw(){
  background(50);
  for(int i = 0; i < 5; i++){
    faces[i].Takho();  
    faces[i].move();
  }
  for(int i = 5; i < 10; i++){
    faces[i].Lim();  
    faces[i].move();
  } 
  for(int i = 10; i < 15; i++){
    faces[i].Kim();  
    faces[i].move();
  }
}
class face {
  float x, vx, y, vy, d;
  
  face(float xx, float vxx, float yy, float vyy, float dd){
    x = xx;  vx = vxx;
    y = yy;  vy = vyy;
    d = dd;
  }
  
  void move(){
    x += vx;  y += vy;
    if(x>width){vx *= -1;}
    else if(x<0){vx *= -1;}
    if(y>height){vy *= -1;}
    else if(y<0){vy *= -1;}
  }
  
  void Takho() {
  //얼굴    
    fill(235, 192, 127);
    strokeWeight(0.5);
    circle(x, y, 7*d);
  //눈  
    strokeWeight(1);
    fill(0);
    ellipse(x-1.6*d, y-0.3*d, 0.9*d, 0.5*d);
    ellipse(x+1.6*d, y-0.3*d, 0.9*d, 0.5*d);
  //입  
    strokeWeight(0);
    fill(213, 129, 118);
    circle(x, y+2*d, 1.6*d);
    fill(0);
    circle(x, y+2*d, 0.8*d);
  //주근깨  
    fill(68, 150, 30);
    circle(x-2.2*d, y+1.7*d, 0.2*d);
    circle(x-1.5*d, y+1.1*d, 0.2*d);
    circle(x-1.4*d, y+2.1*d, 0.2*d);
    circle(x+2.2*d, y+1.7*d, 0.2*d);
    circle(x+1.5*d, y+1.1*d, 0.2*d);
    circle(x+1.4*d, y+2.1*d, 0.2*d);
  //머리
    strokeWeight(0.5);
    fill(205, 105, 91);
    arc(x, y-1.1*d, 6.6*d, 4.9*d, radians(180), radians(360));   
  }
  
  void Lim(){ 
    fill(255,255,0);
    circle(x-0.6*d, y-0.4*d, d*1.1);
    circle(x+0.6*d, y-0.4*d, d*1.1);
    fill(255,255,255);
    circle(x-0.45*d, y-0.25*d, d-0.4*d);
    circle(x+0.45*d, y-0.25*d, d-0.4*d);
    fill(255,255,0);
    ellipse(x,y+0.2*d,d+0.3*d,d);
    fill(0,0,0);
    circle(x-0.15*d, y+0.2*d, d-0.8*d);
    circle(x+0.15*d, y+0.2*d, d-0.8*d);
    circle(x, y+0.35*d, d-0.95*d);
    noFill();
    arc(x, y+0.15*d, d-0.7*d, d-0.3*d, PI*1/3, PI*2/3);
    arc(x-0.15*d, y+0.1*d, d-0.8*d, d-0.8*d, PI*6/5, PI*8/5);
    arc(x+0.15*d, y+0.1*d, d-0.8*d, d-0.8*d, PI*7/5, PI*9/5);
    line(x-0.4*d, y+0.3*d, x-0.8*d, y+0.25*d);
    line(x-0.4*d, y+0.4*d, x-0.8*d, y+0.45*d);
    line(x+0.4*d, y+0.3*d, x+0.8*d, y+0.25*d);
    line(x+0.4*d, y+0.4*d, x+0.8*d, y+0.45*d);
    fill(255,255,255);
    circle(x-0.12*d, y+0.17*d, d-0.9*d);
    circle(x+0.18*d, y+0.17*d, d-0.9*d);
    circle(x-0.17*d, y+0.26*d, d-0.95*d);
    circle(x+0.13*d, y+0.26*d, d-0.95*d);
    }
    
    void Kim(){
    strokeWeight(3);
    fill(200, 200, 200);
    circle(x-0.8*d, y+1.7*d, 0.8*d);
    circle(x+0.8*d, y+1.7*d, 0.8*d);
    fill(240, 240, 240);
    ellipse(x, y, 3*d, 4*d);
    triangle(x-0.5*d, y-2.5*d, x-1.5*d, y-2*d, x-d, y-4*d);
    triangle(x+0.5*d, y-2.5*d, x+1.5*d, y-2*d, x+d, y-4*d);
    ellipse(x, y-2*d, 4*d, 2*d);
    arc(x, y-1.4*d, 0.5*d, 0.5*d, 0, PI);
    fill(200, 200, 200);
    circle(x+0.3*d, y, 0.5*d);
    circle(x-0.3*d, y, 0.5*d);
    fill(206, 224, 38);
    circle(x-0.6*d, y-1.7*d, 0.5*d);
    circle(x+0.6*d, y-1.7*d, 0.5*d);
    }
}
